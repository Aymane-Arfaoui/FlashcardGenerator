{"ast":null,"code":"var _jsxFileName = \"/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n\n  useEffect(() => {\n    // Create a properly structured array from your JSON\n    const processedCards = Array.isArray(flashcardsJson) ? flashcardsJson.map((card, index) => ({\n      id: index,\n      question: card.question || card.q || card.Question || \"Question not found\",\n      answer: card.answer || card.a || card.Answer || \"Answer not found\"\n    })) : [];\n    console.log(\"Processed cards:\", processedCards);\n    setFlashcards(processedCards);\n    setRemainingCards([...Array(processedCards.length).keys()]);\n  }, []);\n  const parseMarkdown = markdown => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    return cards;\n  };\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n  const handleCorrect = () => {\n    const currentId = remainingCards[currentCardIndex];\n    setCorrectCards([...correctCards, currentId]);\n    handleNext();\n  };\n  const handleIncorrect = () => {\n    const currentId = remainingCards[currentCardIndex];\n    setIncorrectCards([...incorrectCards, currentId]);\n    handleNext();\n  };\n  const handleNext = () => {\n    setShowAnswer(false);\n    if (currentCardIndex < remainingCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards have been reviewed\n      setCurrentCardIndex(0);\n      setActiveSection('main');\n      setRemainingCards([...Array(flashcards.length).keys()].filter(id => !correctCards.includes(id) && !incorrectCards.includes(id)));\n    }\n  };\n  const switchSection = section => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => flashcards[id]);\n      case 'incorrect':\n        return incorrectCards.map(id => flashcards[id]);\n      default:\n        return remainingCards.map(id => flashcards[id]);\n    }\n  };\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n  if (!currentCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Flashcards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('main'),\n          children: [\"Main Deck (\", remainingCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('correct'),\n          children: [\"Correct (\", correctCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('incorrect'),\n          children: [\"Incorrect (\", incorrectCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-message\",\n        children: activeSection === 'main' ? \"You've completed all flashcards! Review your correct or incorrect cards.\" : `No cards in the ${activeSection} section yet.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcard-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('main'),\n        children: [\"Main Deck (\", remainingCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('correct'),\n        children: [\"Correct (\", correctCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('incorrect'),\n        children: [\"Incorrect (\", incorrectCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [\"Card \", currentCardIndex + 1, \" of \", currentCards.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard\",\n      onClick: handleFlip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flashcard-inner ${showAnswer ? 'flipped' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-front\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-back\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [showAnswer && activeSection === 'main' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"correct-btn\",\n          onClick: handleCorrect,\n          children: \"Got it right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"incorrect-btn\",\n          onClick: handleIncorrect,\n          children: \"Need more practice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), showAnswer && activeSection !== 'main' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), !showAnswer && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFlip,\n        children: \"Show Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dJ4BNo4Lp+EFfzmYMXYyEuZ1fyM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","flashcardsJson","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","flashcards","setFlashcards","currentCardIndex","setCurrentCardIndex","showAnswer","setShowAnswer","correctCards","setCorrectCards","incorrectCards","setIncorrectCards","remainingCards","setRemainingCards","activeSection","setActiveSection","processedCards","Array","isArray","map","card","index","id","question","q","Question","answer","a","Answer","console","log","length","keys","parseMarkdown","markdown","questionRegex","answerRegex","questions","matchAll","m","answers","cards","i","Math","min","push","handleFlip","handleCorrect","currentId","handleNext","handleIncorrect","filter","includes","switchSection","section","getCurrentCards","currentCards","currentCard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n\n  useEffect(() => {\n    // Create a properly structured array from your JSON\n    const processedCards = Array.isArray(flashcardsJson) \n      ? flashcardsJson.map((card, index) => ({\n          id: index,\n          question: card.question || card.q || card.Question || \"Question not found\",\n          answer: card.answer || card.a || card.Answer || \"Answer not found\"\n        }))\n      : [];\n    \n    console.log(\"Processed cards:\", processedCards);\n    \n    setFlashcards(processedCards);\n    setRemainingCards([...Array(processedCards.length).keys()]);\n  }, []);\n\n  const parseMarkdown = (markdown) => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    \n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    \n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    \n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    \n    return cards;\n  };\n\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n\n  const handleCorrect = () => {\n    const currentId = remainingCards[currentCardIndex];\n    setCorrectCards([...correctCards, currentId]);\n    handleNext();\n  };\n\n  const handleIncorrect = () => {\n    const currentId = remainingCards[currentCardIndex];\n    setIncorrectCards([...incorrectCards, currentId]);\n    handleNext();\n  };\n\n  const handleNext = () => {\n    setShowAnswer(false);\n    if (currentCardIndex < remainingCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards have been reviewed\n      setCurrentCardIndex(0);\n      setActiveSection('main');\n      setRemainingCards([...Array(flashcards.length).keys()].filter(\n        id => !correctCards.includes(id) && !incorrectCards.includes(id)\n      ));\n    }\n  };\n\n  const switchSection = (section) => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => flashcards[id]);\n      case 'incorrect':\n        return incorrectCards.map(id => flashcards[id]);\n      default:\n        return remainingCards.map(id => flashcards[id]);\n    }\n  };\n\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  if (!currentCard) {\n    return (\n      <div className=\"flashcard-app\">\n        <h1>Flashcards</h1>\n        <div className=\"section-buttons\">\n          <button onClick={() => switchSection('main')}>Main Deck ({remainingCards.length})</button>\n          <button onClick={() => switchSection('correct')}>Correct ({correctCards.length})</button>\n          <button onClick={() => switchSection('incorrect')}>Incorrect ({incorrectCards.length})</button>\n        </div>\n        <div className=\"empty-message\">\n          {activeSection === 'main' \n            ? \"You've completed all flashcards! Review your correct or incorrect cards.\" \n            : `No cards in the ${activeSection} section yet.`}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flashcard-app\">\n      <h1>Flashcards</h1>\n      \n      <div className=\"section-buttons\">\n        <button onClick={() => switchSection('main')}>Main Deck ({remainingCards.length})</button>\n        <button onClick={() => switchSection('correct')}>Correct ({correctCards.length})</button>\n        <button onClick={() => switchSection('incorrect')}>Incorrect ({incorrectCards.length})</button>\n      </div>\n      \n      <div className=\"progress\">\n        Card {currentCardIndex + 1} of {currentCards.length}\n      </div>\n      \n      <div className=\"flashcard\" onClick={handleFlip}>\n        <div className={`flashcard-inner ${showAnswer ? 'flipped' : ''}`}>\n          <div className=\"flashcard-front\">\n            <p>{currentCard.question}</p>\n          </div>\n          <div className=\"flashcard-back\">\n            <p>{currentCard.answer}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"controls\">\n        {showAnswer && activeSection === 'main' && (\n          <>\n            <button className=\"correct-btn\" onClick={handleCorrect}>Got it right</button>\n            <button className=\"incorrect-btn\" onClick={handleIncorrect}>Need more practice</button>\n          </>\n        )}\n        {(showAnswer && activeSection !== 'main') && (\n          <button onClick={handleNext}>Next</button>\n        )}\n        {!showAnswer && (\n          <button onClick={handleFlip}>Show Answer</button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
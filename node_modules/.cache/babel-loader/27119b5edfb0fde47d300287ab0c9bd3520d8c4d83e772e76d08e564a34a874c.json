{"ast":null,"code":"var _jsxFileName = \"/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n\n  useEffect(() => {\n    // Use the flashcards from JSON file\n    const hardcodedCards = flashcardsJson;\n    setFlashcards(hardcodedCards);\n    setRemainingCards([...Array(hardcodedCards.length).keys()]);\n  }, []);\n  const parseMarkdown = markdown => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    return cards;\n  };\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n  const handleCorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to correct\n      const currentId = remainingCards[currentCardIndex];\n      setCorrectCards([...correctCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'incorrect') {\n      // Move from incorrect to correct\n      const currentId = incorrectCards[currentCardIndex];\n      setIncorrectCards(incorrectCards.filter(id => id !== currentId));\n      setCorrectCards([...correctCards, currentId]);\n\n      // If this was the last card in incorrect section, go back to main\n      if (incorrectCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= incorrectCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'correct') {\n      // Already correct, just go to next card\n      handleNext();\n    }\n  };\n  const handleIncorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to incorrect\n      const currentId = remainingCards[currentCardIndex];\n      setIncorrectCards([...incorrectCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'correct') {\n      // Move from correct to incorrect\n      const currentId = correctCards[currentCardIndex];\n      setCorrectCards(correctCards.filter(id => id !== currentId));\n      setIncorrectCards([...incorrectCards, currentId]);\n\n      // If this was the last card in correct section, go back to main\n      if (correctCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= correctCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'incorrect') {\n      // Already incorrect, just go to next card\n      handleNext();\n    }\n  };\n  const handleNext = () => {\n    setShowAnswer(false);\n    const currentCards = getCurrentCards();\n    if (currentCardIndex < currentCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards in this section have been reviewed\n      setCurrentCardIndex(0);\n\n      // If we're in the main section and finished all cards, update remaining cards\n      if (activeSection === 'main') {\n        setRemainingCards([...Array(flashcards.length).keys()].filter(id => !correctCards.includes(id) && !incorrectCards.includes(id)));\n      }\n    }\n  };\n  const switchSection = section => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n      case 'incorrect':\n        return incorrectCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n      default:\n        return remainingCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n    }\n  };\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  // Create indicator dots for cards\n  const renderIndicatorDots = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-indicators\",\n      children: currentCards.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `indicator-dot ${index === currentCardIndex ? 'active' : ''}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  };\n  if (!currentCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Flashcards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('main'),\n          children: [\"Main Deck (\", remainingCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('correct'),\n          children: [\"Correct (\", correctCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('incorrect'),\n          children: [\"Incorrect (\", incorrectCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-message\",\n        children: activeSection === 'main' ? \"You've completed all flashcards! Review your correct or incorrect cards.\" : `No cards in the ${activeSection} section yet.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcard-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('main'),\n        children: [\"Main Deck (\", remainingCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('correct'),\n        children: [\"Correct (\", correctCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('incorrect'),\n        children: [\"Incorrect (\", incorrectCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [\"Card \", currentCardIndex + 1, \" of \", currentCards.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), renderIndicatorDots(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard\",\n      onClick: handleFlip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flashcard-inner ${showAnswer ? 'flipped' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-front\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-back\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flip-hint\",\n      children: !showAnswer ? \"Click card to reveal answer\" : \"Click buttons below to continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [showAnswer && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"correct-btn\",\n          onClick: handleCorrect,\n          children: \"Got it right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"incorrect-btn\",\n          onClick: handleIncorrect,\n          children: \"Need more practice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !showAnswer && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFlip,\n        children: \"Show Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-indicator\",\n      children: activeSection === 'main' ? 'Main Deck' : activeSection === 'correct' ? 'Reviewing Correct Cards' : 'Reviewing Incorrect Cards'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dJ4BNo4Lp+EFfzmYMXYyEuZ1fyM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","flashcardsJson","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","flashcards","setFlashcards","currentCardIndex","setCurrentCardIndex","showAnswer","setShowAnswer","correctCards","setCorrectCards","incorrectCards","setIncorrectCards","remainingCards","setRemainingCards","activeSection","setActiveSection","hardcodedCards","Array","length","keys","parseMarkdown","markdown","questionRegex","answerRegex","questions","matchAll","map","m","answers","console","log","cards","i","Math","min","push","id","question","answer","handleFlip","handleCorrect","currentId","handleNext","filter","handleIncorrect","currentCards","getCurrentCards","includes","switchSection","section","originalId","currentCard","renderIndicatorDots","className","children","_","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n\n  useEffect(() => {\n    // Use the flashcards from JSON file\n    const hardcodedCards = flashcardsJson;\n    \n    setFlashcards(hardcodedCards);\n    setRemainingCards([...Array(hardcodedCards.length).keys()]);\n  }, []);\n\n  const parseMarkdown = (markdown) => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    \n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    \n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    \n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    \n    return cards;\n  };\n\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n\n  const handleCorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to correct\n      const currentId = remainingCards[currentCardIndex];\n      setCorrectCards([...correctCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'incorrect') {\n      // Move from incorrect to correct\n      const currentId = incorrectCards[currentCardIndex];\n      setIncorrectCards(incorrectCards.filter(id => id !== currentId));\n      setCorrectCards([...correctCards, currentId]);\n      \n      // If this was the last card in incorrect section, go back to main\n      if (incorrectCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= incorrectCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'correct') {\n      // Already correct, just go to next card\n      handleNext();\n    }\n  };\n\n  const handleIncorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to incorrect\n      const currentId = remainingCards[currentCardIndex];\n      setIncorrectCards([...incorrectCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'correct') {\n      // Move from correct to incorrect\n      const currentId = correctCards[currentCardIndex];\n      setCorrectCards(correctCards.filter(id => id !== currentId));\n      setIncorrectCards([...incorrectCards, currentId]);\n      \n      // If this was the last card in correct section, go back to main\n      if (correctCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= correctCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'incorrect') {\n      // Already incorrect, just go to next card\n      handleNext();\n    }\n  };\n\n  const handleNext = () => {\n    setShowAnswer(false);\n    const currentCards = getCurrentCards();\n    \n    if (currentCardIndex < currentCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards in this section have been reviewed\n      setCurrentCardIndex(0);\n      \n      // If we're in the main section and finished all cards, update remaining cards\n      if (activeSection === 'main') {\n        setRemainingCards([...Array(flashcards.length).keys()].filter(\n          id => !correctCards.includes(id) && !incorrectCards.includes(id)\n        ));\n      }\n    }\n  };\n\n  const switchSection = (section) => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => ({ ...flashcards[id], originalId: id }));\n      case 'incorrect':\n        return incorrectCards.map(id => ({ ...flashcards[id], originalId: id }));\n      default:\n        return remainingCards.map(id => ({ ...flashcards[id], originalId: id }));\n    }\n  };\n\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  // Create indicator dots for cards\n  const renderIndicatorDots = () => {\n    return (\n      <div className=\"card-indicators\">\n        {currentCards.map((_, index) => (\n          <div \n            key={index} \n            className={`indicator-dot ${index === currentCardIndex ? 'active' : ''}`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (!currentCard) {\n    return (\n      <div className=\"flashcard-app\">\n        <h1>Flashcards</h1>\n        <div className=\"section-buttons\">\n          <button onClick={() => switchSection('main')}>Main Deck ({remainingCards.length})</button>\n          <button onClick={() => switchSection('correct')}>Correct ({correctCards.length})</button>\n          <button onClick={() => switchSection('incorrect')}>Incorrect ({incorrectCards.length})</button>\n        </div>\n        <div className=\"empty-message\">\n          {activeSection === 'main' \n            ? \"You've completed all flashcards! Review your correct or incorrect cards.\" \n            : `No cards in the ${activeSection} section yet.`}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flashcard-app\">\n      <h1>Flashcards</h1>\n      \n      <div className=\"section-buttons\">\n        <button onClick={() => switchSection('main')}>Main Deck ({remainingCards.length})</button>\n        <button onClick={() => switchSection('correct')}>Correct ({correctCards.length})</button>\n        <button onClick={() => switchSection('incorrect')}>Incorrect ({incorrectCards.length})</button>\n      </div>\n      \n      <div className=\"progress\">\n        Card {currentCardIndex + 1} of {currentCards.length}\n      </div>\n      \n      {renderIndicatorDots()}\n      \n      <div className=\"flashcard\" onClick={handleFlip}>\n        <div className={`flashcard-inner ${showAnswer ? 'flipped' : ''}`}>\n          <div className=\"flashcard-front\">\n            <p>{currentCard.question}</p>\n          </div>\n          <div className=\"flashcard-back\">\n            <p>{currentCard.answer}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flip-hint\">\n        {!showAnswer ? \"Click card to reveal answer\" : \"Click buttons below to continue\"}\n      </div>\n      \n      <div className=\"controls\">\n        {showAnswer && (\n          <>\n            <button className=\"correct-btn\" onClick={handleCorrect}>Got it right</button>\n            <button className=\"incorrect-btn\" onClick={handleIncorrect}>Need more practice</button>\n          </>\n        )}\n        {!showAnswer && (\n          <button onClick={handleFlip}>Show Answer</button>\n        )}\n      </div>\n      \n      <div className=\"section-indicator\">\n        {activeSection === 'main' ? 'Main Deck' : \n         activeSection === 'correct' ? 'Reviewing Correct Cards' : \n         'Reviewing Incorrect Cards'}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
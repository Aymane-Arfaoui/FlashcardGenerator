{"ast":null,"code":"var _jsxFileName = \"/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n  const [storageAvailable, setStorageAvailable] = useState(true);\n\n  // Check if localStorage is available\n  const isLocalStorageAvailable = () => {\n    try {\n      const testKey = '__test__';\n      localStorage.setItem(testKey, testKey);\n      localStorage.removeItem(testKey);\n      return true;\n    } catch (e) {\n      console.error('localStorage is not available:', e);\n      return false;\n    }\n  };\n\n  // Load data from localStorage on initial render\n  useEffect(() => {\n    // Check if localStorage is available\n    const storageWorks = isLocalStorageAvailable();\n    setStorageAvailable(storageWorks);\n\n    // Use the flashcards from JSON file\n    const hardcodedCards = flashcardsJson;\n    setFlashcards(hardcodedCards);\n    if (storageWorks) {\n      try {\n        // Load saved state from localStorage\n        const savedCorrectCards = JSON.parse(localStorage.getItem('flashcards_correctCards')) || [];\n        const savedIncorrectCards = JSON.parse(localStorage.getItem('flashcards_incorrectCards')) || [];\n        const savedActiveSection = localStorage.getItem('flashcards_activeSection') || 'main';\n        const savedCurrentIndex = parseInt(localStorage.getItem('flashcards_currentCardIndex')) || 0;\n        console.log('Loaded from localStorage:', {\n          correctCards: savedCorrectCards,\n          incorrectCards: savedIncorrectCards,\n          activeSection: savedActiveSection,\n          currentIndex: savedCurrentIndex\n        });\n        setCorrectCards(savedCorrectCards);\n        setIncorrectCards(savedIncorrectCards);\n        setActiveSection(savedActiveSection);\n\n        // Calculate remaining cards based on saved correct and incorrect cards\n        const newRemainingCards = [...Array(hardcodedCards.length).keys()].filter(id => !savedCorrectCards.includes(id) && !savedIncorrectCards.includes(id));\n        setRemainingCards(newRemainingCards);\n\n        // Set current index, but make sure it's valid for the current section\n        if (savedActiveSection === 'main' && savedCurrentIndex < newRemainingCards.length) {\n          setCurrentCardIndex(savedCurrentIndex);\n        } else if (savedActiveSection === 'correct' && savedCurrentIndex < savedCorrectCards.length) {\n          setCurrentCardIndex(savedCurrentIndex);\n        } else if (savedActiveSection === 'incorrect' && savedCurrentIndex < savedIncorrectCards.length) {\n          setCurrentCardIndex(savedCurrentIndex);\n        } else {\n          setCurrentCardIndex(0);\n        }\n      } catch (error) {\n        console.error('Error loading from localStorage:', error);\n        // Fall back to initial state\n        setRemainingCards([...Array(hardcodedCards.length).keys()]);\n      }\n    } else {\n      // If localStorage is not available, just set the initial state\n      setRemainingCards([...Array(hardcodedCards.length).keys()]);\n    }\n  }, []);\n\n  // Save to localStorage whenever state changes\n  useEffect(() => {\n    if (storageAvailable && flashcards.length > 0) {\n      try {\n        // Use a prefix to avoid potential conflicts with other apps\n        localStorage.setItem('flashcards_correctCards', JSON.stringify(correctCards));\n        localStorage.setItem('flashcards_incorrectCards', JSON.stringify(incorrectCards));\n        localStorage.setItem('flashcards_activeSection', activeSection);\n        localStorage.setItem('flashcards_currentCardIndex', currentCardIndex.toString());\n        console.log('Saved to localStorage:', {\n          correctCards,\n          incorrectCards,\n          activeSection,\n          currentIndex: currentCardIndex\n        });\n\n        // Update remaining cards whenever correct or incorrect cards change\n        const newRemainingCards = [...Array(flashcards.length).keys()].filter(id => !correctCards.includes(id) && !incorrectCards.includes(id));\n        setRemainingCards(newRemainingCards);\n      } catch (error) {\n        console.error('Error saving to localStorage:', error);\n      }\n    }\n  }, [correctCards, incorrectCards, activeSection, currentCardIndex, flashcards.length, storageAvailable]);\n  const parseMarkdown = markdown => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    return cards;\n  };\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n  const handleCorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to correct\n      const currentId = remainingCards[currentCardIndex];\n      setCorrectCards([...correctCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'incorrect') {\n      // Move from incorrect to correct\n      const currentId = incorrectCards[currentCardIndex];\n      setIncorrectCards(incorrectCards.filter(id => id !== currentId));\n      setCorrectCards([...correctCards, currentId]);\n\n      // If this was the last card in incorrect section, go back to main\n      if (incorrectCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= incorrectCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'correct') {\n      // Already correct, just go to next card\n      handleNext();\n    }\n  };\n  const handleIncorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to incorrect\n      const currentId = remainingCards[currentCardIndex];\n      setIncorrectCards([...incorrectCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'correct') {\n      // Move from correct to incorrect\n      const currentId = correctCards[currentCardIndex];\n      setCorrectCards(correctCards.filter(id => id !== currentId));\n      setIncorrectCards([...incorrectCards, currentId]);\n\n      // If this was the last card in correct section, go back to main\n      if (correctCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= correctCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'incorrect') {\n      // Already incorrect, just go to next card\n      handleNext();\n    }\n  };\n  const handleNext = () => {\n    setShowAnswer(false);\n    const currentCards = getCurrentCards();\n    if (currentCardIndex < currentCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards in this section have been reviewed\n      setCurrentCardIndex(0);\n    }\n  };\n  const switchSection = section => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n      case 'incorrect':\n        return incorrectCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n      default:\n        return remainingCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n    }\n  };\n\n  // Add a reset function to clear all progress\n  const resetProgress = () => {\n    if (window.confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n      setCorrectCards([]);\n      setIncorrectCards([]);\n      setRemainingCards([...Array(flashcards.length).keys()]);\n      setActiveSection('main');\n      setCurrentCardIndex(0);\n      setShowAnswer(false);\n\n      // Clear localStorage with the prefix\n      if (storageAvailable) {\n        try {\n          localStorage.removeItem('flashcards_correctCards');\n          localStorage.removeItem('flashcards_incorrectCards');\n          localStorage.removeItem('flashcards_activeSection');\n          localStorage.removeItem('flashcards_currentCardIndex');\n          console.log('Reset: Cleared localStorage');\n        } catch (error) {\n          console.error('Error clearing localStorage:', error);\n        }\n      }\n    }\n  };\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  // Create indicator dots for cards\n  const renderIndicatorDots = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-indicators\",\n      children: currentCards.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `indicator-dot ${index === currentCardIndex ? 'active' : ''}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this);\n  };\n  if (!currentCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Flashcards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('main'),\n          className: activeSection === 'main' ? 'active-section' : '',\n          children: [\"Main Deck (\", remainingCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('correct'),\n          className: activeSection === 'correct' ? 'active-section' : '',\n          children: [\"Correct (\", correctCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('incorrect'),\n          className: activeSection === 'incorrect' ? 'active-section' : '',\n          children: [\"Incorrect (\", incorrectCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-message\",\n        children: activeSection === 'main' ? \"You've completed all flashcards! Review your correct or incorrect cards.\" : `No cards in the ${activeSection} section yet.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: resetProgress,\n          children: \"Reset All Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcard-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('main'),\n        className: activeSection === 'main' ? 'active-section' : '',\n        children: [\"Main Deck (\", remainingCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('correct'),\n        className: activeSection === 'correct' ? 'active-section' : '',\n        children: [\"Correct (\", correctCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('incorrect'),\n        className: activeSection === 'incorrect' ? 'active-section' : '',\n        children: [\"Incorrect (\", incorrectCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [\"Card \", currentCardIndex + 1, \" of \", currentCards.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), renderIndicatorDots(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard\",\n      onClick: handleFlip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flashcard-inner ${showAnswer ? 'flipped' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-front\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-back\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flip-hint\",\n      children: !showAnswer ? \"Click card to reveal answer\" : \"Click buttons below to continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [showAnswer && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"correct-btn\",\n          onClick: handleCorrect,\n          children: \"Got it right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"incorrect-btn\",\n          onClick: handleIncorrect,\n          children: \"Need more practice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !showAnswer && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFlip,\n        children: \"Show Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-indicator\",\n      children: activeSection === 'main' ? 'Main Deck' : activeSection === 'correct' ? 'Reviewing Correct Cards' : 'Reviewing Incorrect Cards'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetProgress,\n        children: \"Reset All Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rIGMnbqJFxtsM5SStLowUAMwdSA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","flashcardsJson","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","flashcards","setFlashcards","currentCardIndex","setCurrentCardIndex","showAnswer","setShowAnswer","correctCards","setCorrectCards","incorrectCards","setIncorrectCards","remainingCards","setRemainingCards","activeSection","setActiveSection","storageAvailable","setStorageAvailable","isLocalStorageAvailable","testKey","localStorage","setItem","removeItem","e","console","error","storageWorks","hardcodedCards","savedCorrectCards","JSON","parse","getItem","savedIncorrectCards","savedActiveSection","savedCurrentIndex","parseInt","log","currentIndex","newRemainingCards","Array","length","keys","filter","id","includes","stringify","toString","parseMarkdown","markdown","questionRegex","answerRegex","questions","matchAll","map","m","answers","cards","i","Math","min","push","question","answer","handleFlip","handleCorrect","currentId","handleNext","handleIncorrect","currentCards","getCurrentCards","switchSection","section","originalId","resetProgress","window","confirm","currentCard","renderIndicatorDots","className","children","_","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n  const [storageAvailable, setStorageAvailable] = useState(true);\n\n  // Check if localStorage is available\n  const isLocalStorageAvailable = () => {\n    try {\n      const testKey = '__test__';\n      localStorage.setItem(testKey, testKey);\n      localStorage.removeItem(testKey);\n      return true;\n    } catch (e) {\n      console.error('localStorage is not available:', e);\n      return false;\n    }\n  };\n\n  // Load data from localStorage on initial render\n  useEffect(() => {\n    // Check if localStorage is available\n    const storageWorks = isLocalStorageAvailable();\n    setStorageAvailable(storageWorks);\n    \n    // Use the flashcards from JSON file\n    const hardcodedCards = flashcardsJson;\n    setFlashcards(hardcodedCards);\n    \n    if (storageWorks) {\n      try {\n        // Load saved state from localStorage\n        const savedCorrectCards = JSON.parse(localStorage.getItem('flashcards_correctCards')) || [];\n        const savedIncorrectCards = JSON.parse(localStorage.getItem('flashcards_incorrectCards')) || [];\n        const savedActiveSection = localStorage.getItem('flashcards_activeSection') || 'main';\n        const savedCurrentIndex = parseInt(localStorage.getItem('flashcards_currentCardIndex')) || 0;\n        \n        console.log('Loaded from localStorage:', {\n          correctCards: savedCorrectCards,\n          incorrectCards: savedIncorrectCards,\n          activeSection: savedActiveSection,\n          currentIndex: savedCurrentIndex\n        });\n        \n        setCorrectCards(savedCorrectCards);\n        setIncorrectCards(savedIncorrectCards);\n        setActiveSection(savedActiveSection);\n        \n        // Calculate remaining cards based on saved correct and incorrect cards\n        const newRemainingCards = [...Array(hardcodedCards.length).keys()].filter(\n          id => !savedCorrectCards.includes(id) && !savedIncorrectCards.includes(id)\n        );\n        setRemainingCards(newRemainingCards);\n        \n        // Set current index, but make sure it's valid for the current section\n        if (savedActiveSection === 'main' && savedCurrentIndex < newRemainingCards.length) {\n          setCurrentCardIndex(savedCurrentIndex);\n        } else if (savedActiveSection === 'correct' && savedCurrentIndex < savedCorrectCards.length) {\n          setCurrentCardIndex(savedCurrentIndex);\n        } else if (savedActiveSection === 'incorrect' && savedCurrentIndex < savedIncorrectCards.length) {\n          setCurrentCardIndex(savedCurrentIndex);\n        } else {\n          setCurrentCardIndex(0);\n        }\n      } catch (error) {\n        console.error('Error loading from localStorage:', error);\n        // Fall back to initial state\n        setRemainingCards([...Array(hardcodedCards.length).keys()]);\n      }\n    } else {\n      // If localStorage is not available, just set the initial state\n      setRemainingCards([...Array(hardcodedCards.length).keys()]);\n    }\n  }, []);\n\n  // Save to localStorage whenever state changes\n  useEffect(() => {\n    if (storageAvailable && flashcards.length > 0) {\n      try {\n        // Use a prefix to avoid potential conflicts with other apps\n        localStorage.setItem('flashcards_correctCards', JSON.stringify(correctCards));\n        localStorage.setItem('flashcards_incorrectCards', JSON.stringify(incorrectCards));\n        localStorage.setItem('flashcards_activeSection', activeSection);\n        localStorage.setItem('flashcards_currentCardIndex', currentCardIndex.toString());\n        \n        console.log('Saved to localStorage:', {\n          correctCards,\n          incorrectCards,\n          activeSection,\n          currentIndex: currentCardIndex\n        });\n        \n        // Update remaining cards whenever correct or incorrect cards change\n        const newRemainingCards = [...Array(flashcards.length).keys()].filter(\n          id => !correctCards.includes(id) && !incorrectCards.includes(id)\n        );\n        setRemainingCards(newRemainingCards);\n      } catch (error) {\n        console.error('Error saving to localStorage:', error);\n      }\n    }\n  }, [correctCards, incorrectCards, activeSection, currentCardIndex, flashcards.length, storageAvailable]);\n\n  const parseMarkdown = (markdown) => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    \n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    \n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    \n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    \n    return cards;\n  };\n\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n\n  const handleCorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to correct\n      const currentId = remainingCards[currentCardIndex];\n      setCorrectCards([...correctCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'incorrect') {\n      // Move from incorrect to correct\n      const currentId = incorrectCards[currentCardIndex];\n      setIncorrectCards(incorrectCards.filter(id => id !== currentId));\n      setCorrectCards([...correctCards, currentId]);\n      \n      // If this was the last card in incorrect section, go back to main\n      if (incorrectCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= incorrectCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'correct') {\n      // Already correct, just go to next card\n      handleNext();\n    }\n  };\n\n  const handleIncorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to incorrect\n      const currentId = remainingCards[currentCardIndex];\n      setIncorrectCards([...incorrectCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'correct') {\n      // Move from correct to incorrect\n      const currentId = correctCards[currentCardIndex];\n      setCorrectCards(correctCards.filter(id => id !== currentId));\n      setIncorrectCards([...incorrectCards, currentId]);\n      \n      // If this was the last card in correct section, go back to main\n      if (correctCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= correctCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'incorrect') {\n      // Already incorrect, just go to next card\n      handleNext();\n    }\n  };\n\n  const handleNext = () => {\n    setShowAnswer(false);\n    const currentCards = getCurrentCards();\n    \n    if (currentCardIndex < currentCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards in this section have been reviewed\n      setCurrentCardIndex(0);\n    }\n  };\n\n  const switchSection = (section) => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => ({ ...flashcards[id], originalId: id }));\n      case 'incorrect':\n        return incorrectCards.map(id => ({ ...flashcards[id], originalId: id }));\n      default:\n        return remainingCards.map(id => ({ ...flashcards[id], originalId: id }));\n    }\n  };\n\n  // Add a reset function to clear all progress\n  const resetProgress = () => {\n    if (window.confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n      setCorrectCards([]);\n      setIncorrectCards([]);\n      setRemainingCards([...Array(flashcards.length).keys()]);\n      setActiveSection('main');\n      setCurrentCardIndex(0);\n      setShowAnswer(false);\n      \n      // Clear localStorage with the prefix\n      if (storageAvailable) {\n        try {\n          localStorage.removeItem('flashcards_correctCards');\n          localStorage.removeItem('flashcards_incorrectCards');\n          localStorage.removeItem('flashcards_activeSection');\n          localStorage.removeItem('flashcards_currentCardIndex');\n          console.log('Reset: Cleared localStorage');\n        } catch (error) {\n          console.error('Error clearing localStorage:', error);\n        }\n      }\n    }\n  };\n\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  // Create indicator dots for cards\n  const renderIndicatorDots = () => {\n    return (\n      <div className=\"card-indicators\">\n        {currentCards.map((_, index) => (\n          <div \n            key={index} \n            className={`indicator-dot ${index === currentCardIndex ? 'active' : ''}`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (!currentCard) {\n    return (\n      <div className=\"flashcard-app\">\n        <h1>Flashcards</h1>\n        <div className=\"section-buttons\">\n          <button \n            onClick={() => switchSection('main')}\n            className={activeSection === 'main' ? 'active-section' : ''}\n          >\n            Main Deck ({remainingCards.length})\n          </button>\n          <button \n            onClick={() => switchSection('correct')}\n            className={activeSection === 'correct' ? 'active-section' : ''}\n          >\n            Correct ({correctCards.length})\n          </button>\n          <button \n            onClick={() => switchSection('incorrect')}\n            className={activeSection === 'incorrect' ? 'active-section' : ''}\n          >\n            Incorrect ({incorrectCards.length})\n          </button>\n        </div>\n        <div className=\"empty-message\">\n          {activeSection === 'main' \n            ? \"You've completed all flashcards! Review your correct or incorrect cards.\" \n            : `No cards in the ${activeSection} section yet.`}\n        </div>\n        <div className=\"reset-container\">\n          <button className=\"reset-button\" onClick={resetProgress}>Reset All Progress</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flashcard-app\">\n      <h1>Flashcards</h1>\n      \n      <div className=\"section-buttons\">\n        <button \n          onClick={() => switchSection('main')}\n          className={activeSection === 'main' ? 'active-section' : ''}\n        >\n          Main Deck ({remainingCards.length})\n        </button>\n        <button \n          onClick={() => switchSection('correct')}\n          className={activeSection === 'correct' ? 'active-section' : ''}\n        >\n          Correct ({correctCards.length})\n        </button>\n        <button \n          onClick={() => switchSection('incorrect')}\n          className={activeSection === 'incorrect' ? 'active-section' : ''}\n        >\n          Incorrect ({incorrectCards.length})\n        </button>\n      </div>\n      \n      <div className=\"progress\">\n        Card {currentCardIndex + 1} of {currentCards.length}\n      </div>\n      \n      {renderIndicatorDots()}\n      \n      <div className=\"flashcard\" onClick={handleFlip}>\n        <div className={`flashcard-inner ${showAnswer ? 'flipped' : ''}`}>\n          <div className=\"flashcard-front\">\n            <p>{currentCard.question}</p>\n          </div>\n          <div className=\"flashcard-back\">\n            <p>{currentCard.answer}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flip-hint\">\n        {!showAnswer ? \"Click card to reveal answer\" : \"Click buttons below to continue\"}\n      </div>\n      \n      <div className=\"controls\">\n        {showAnswer && (\n          <>\n            <button className=\"correct-btn\" onClick={handleCorrect}>Got it right</button>\n            <button className=\"incorrect-btn\" onClick={handleIncorrect}>Need more practice</button>\n          </>\n        )}\n        {!showAnswer && (\n          <button onClick={handleFlip}>Show Answer</button>\n        )}\n      </div>\n      \n      <div className=\"section-indicator\">\n        {activeSection === 'main' ? 'Main Deck' : \n         activeSection === 'correct' ? 'Reviewing Correct Cards' : \n         'Reviewing Incorrect Cards'}\n      </div>\n      \n      <div className=\"reset-container\">\n        <button className=\"reset-button\" onClick={resetProgress}>Reset All Progress</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n\n  // Load data from localStorage on initial render\n  useEffect(() => {\n    // Use the flashcards from JSON file\n    const hardcodedCards = flashcardsJson;\n    setFlashcards(hardcodedCards);\n\n    // Load saved state from localStorage\n    const savedCorrectCards = JSON.parse(localStorage.getItem('correctCards')) || [];\n    const savedIncorrectCards = JSON.parse(localStorage.getItem('incorrectCards')) || [];\n    const savedActiveSection = localStorage.getItem('activeSection') || 'main';\n    const savedCurrentIndex = parseInt(localStorage.getItem('currentCardIndex')) || 0;\n    setCorrectCards(savedCorrectCards);\n    setIncorrectCards(savedIncorrectCards);\n    setActiveSection(savedActiveSection);\n\n    // Calculate remaining cards based on saved correct and incorrect cards\n    const newRemainingCards = [...Array(hardcodedCards.length).keys()].filter(id => !savedCorrectCards.includes(id) && !savedIncorrectCards.includes(id));\n    setRemainingCards(newRemainingCards);\n\n    // Set current index, but make sure it's valid for the current section\n    if (savedActiveSection === 'main' && savedCurrentIndex < newRemainingCards.length) {\n      setCurrentCardIndex(savedCurrentIndex);\n    } else if (savedActiveSection === 'correct' && savedCurrentIndex < savedCorrectCards.length) {\n      setCurrentCardIndex(savedCurrentIndex);\n    } else if (savedActiveSection === 'incorrect' && savedCurrentIndex < savedIncorrectCards.length) {\n      setCurrentCardIndex(savedCurrentIndex);\n    } else {\n      setCurrentCardIndex(0);\n    }\n  }, []);\n\n  // Save to localStorage whenever state changes\n  useEffect(() => {\n    localStorage.setItem('correctCards', JSON.stringify(correctCards));\n    localStorage.setItem('incorrectCards', JSON.stringify(incorrectCards));\n    localStorage.setItem('activeSection', activeSection);\n    localStorage.setItem('currentCardIndex', currentCardIndex.toString());\n\n    // Update remaining cards whenever correct or incorrect cards change\n    if (flashcards.length > 0) {\n      const newRemainingCards = [...Array(flashcards.length).keys()].filter(id => !correctCards.includes(id) && !incorrectCards.includes(id));\n      setRemainingCards(newRemainingCards);\n    }\n  }, [correctCards, incorrectCards, activeSection, currentCardIndex, flashcards.length]);\n  const parseMarkdown = markdown => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    return cards;\n  };\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n  const handleCorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to correct\n      const currentId = remainingCards[currentCardIndex];\n      setCorrectCards([...correctCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'incorrect') {\n      // Move from incorrect to correct\n      const currentId = incorrectCards[currentCardIndex];\n      setIncorrectCards(incorrectCards.filter(id => id !== currentId));\n      setCorrectCards([...correctCards, currentId]);\n\n      // If this was the last card in incorrect section, go back to main\n      if (incorrectCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= incorrectCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'correct') {\n      // Already correct, just go to next card\n      handleNext();\n    }\n  };\n  const handleIncorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to incorrect\n      const currentId = remainingCards[currentCardIndex];\n      setIncorrectCards([...incorrectCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'correct') {\n      // Move from correct to incorrect\n      const currentId = correctCards[currentCardIndex];\n      setCorrectCards(correctCards.filter(id => id !== currentId));\n      setIncorrectCards([...incorrectCards, currentId]);\n\n      // If this was the last card in correct section, go back to main\n      if (correctCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= correctCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'incorrect') {\n      // Already incorrect, just go to next card\n      handleNext();\n    }\n  };\n  const handleNext = () => {\n    setShowAnswer(false);\n    const currentCards = getCurrentCards();\n    if (currentCardIndex < currentCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards in this section have been reviewed\n      setCurrentCardIndex(0);\n    }\n  };\n  const switchSection = section => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n      case 'incorrect':\n        return incorrectCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n      default:\n        return remainingCards.map(id => ({\n          ...flashcards[id],\n          originalId: id\n        }));\n    }\n  };\n\n  // Add a reset function to clear all progress\n  const resetProgress = () => {\n    if (window.confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n      setCorrectCards([]);\n      setIncorrectCards([]);\n      setRemainingCards([...Array(flashcards.length).keys()]);\n      setActiveSection('main');\n      setCurrentCardIndex(0);\n      setShowAnswer(false);\n\n      // Clear localStorage\n      localStorage.removeItem('correctCards');\n      localStorage.removeItem('incorrectCards');\n      localStorage.removeItem('activeSection');\n      localStorage.removeItem('currentCardIndex');\n    }\n  };\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  // Create indicator dots for cards\n  const renderIndicatorDots = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-indicators\",\n      children: currentCards.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `indicator-dot ${index === currentCardIndex ? 'active' : ''}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  };\n  if (!currentCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Flashcards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('main'),\n          className: activeSection === 'main' ? 'active-section' : '',\n          children: [\"Main Deck (\", remainingCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('correct'),\n          className: activeSection === 'correct' ? 'active-section' : '',\n          children: [\"Correct (\", correctCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => switchSection('incorrect'),\n          className: activeSection === 'incorrect' ? 'active-section' : '',\n          children: [\"Incorrect (\", incorrectCards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-message\",\n        children: activeSection === 'main' ? \"You've completed all flashcards! Review your correct or incorrect cards.\" : `No cards in the ${activeSection} section yet.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: resetProgress,\n          children: \"Reset All Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcard-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('main'),\n        className: activeSection === 'main' ? 'active-section' : '',\n        children: [\"Main Deck (\", remainingCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('correct'),\n        className: activeSection === 'correct' ? 'active-section' : '',\n        children: [\"Correct (\", correctCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => switchSection('incorrect'),\n        className: activeSection === 'incorrect' ? 'active-section' : '',\n        children: [\"Incorrect (\", incorrectCards.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [\"Card \", currentCardIndex + 1, \" of \", currentCards.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), renderIndicatorDots(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard\",\n      onClick: handleFlip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flashcard-inner ${showAnswer ? 'flipped' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-front\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-back\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flip-hint\",\n      children: !showAnswer ? \"Click card to reveal answer\" : \"Click buttons below to continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [showAnswer && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"correct-btn\",\n          onClick: handleCorrect,\n          children: \"Got it right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"incorrect-btn\",\n          onClick: handleIncorrect,\n          children: \"Need more practice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !showAnswer && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFlip,\n        children: \"Show Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-indicator\",\n      children: activeSection === 'main' ? 'Main Deck' : activeSection === 'correct' ? 'Reviewing Correct Cards' : 'Reviewing Incorrect Cards'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetProgress,\n        children: \"Reset All Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VXgw3UDTUugDiSXDukc1VvDz9xQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","flashcardsJson","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","flashcards","setFlashcards","currentCardIndex","setCurrentCardIndex","showAnswer","setShowAnswer","correctCards","setCorrectCards","incorrectCards","setIncorrectCards","remainingCards","setRemainingCards","activeSection","setActiveSection","hardcodedCards","savedCorrectCards","JSON","parse","localStorage","getItem","savedIncorrectCards","savedActiveSection","savedCurrentIndex","parseInt","newRemainingCards","Array","length","keys","filter","id","includes","setItem","stringify","toString","parseMarkdown","markdown","questionRegex","answerRegex","questions","matchAll","map","m","answers","console","log","cards","i","Math","min","push","question","answer","handleFlip","handleCorrect","currentId","handleNext","handleIncorrect","currentCards","getCurrentCards","switchSection","section","originalId","resetProgress","window","confirm","removeItem","currentCard","renderIndicatorDots","className","children","_","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/aymanearfaoui/Desktop/Concordia2024-2025/winter2025/SOEN 384/lectures/flashCards/flascard-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import flashcardsContent from './flashcards.md'; // This requires special webpack loader configuration\nimport flashcardsJson from './flashcards.json';\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctCards, setCorrectCards] = useState([]);\n  const [incorrectCards, setIncorrectCards] = useState([]);\n  const [remainingCards, setRemainingCards] = useState([]);\n  const [activeSection, setActiveSection] = useState('main'); // 'main', 'correct', or 'incorrect'\n\n  // Load data from localStorage on initial render\n  useEffect(() => {\n    // Use the flashcards from JSON file\n    const hardcodedCards = flashcardsJson;\n    setFlashcards(hardcodedCards);\n    \n    // Load saved state from localStorage\n    const savedCorrectCards = JSON.parse(localStorage.getItem('correctCards')) || [];\n    const savedIncorrectCards = JSON.parse(localStorage.getItem('incorrectCards')) || [];\n    const savedActiveSection = localStorage.getItem('activeSection') || 'main';\n    const savedCurrentIndex = parseInt(localStorage.getItem('currentCardIndex')) || 0;\n    \n    setCorrectCards(savedCorrectCards);\n    setIncorrectCards(savedIncorrectCards);\n    setActiveSection(savedActiveSection);\n    \n    // Calculate remaining cards based on saved correct and incorrect cards\n    const newRemainingCards = [...Array(hardcodedCards.length).keys()].filter(\n      id => !savedCorrectCards.includes(id) && !savedIncorrectCards.includes(id)\n    );\n    setRemainingCards(newRemainingCards);\n    \n    // Set current index, but make sure it's valid for the current section\n    if (savedActiveSection === 'main' && savedCurrentIndex < newRemainingCards.length) {\n      setCurrentCardIndex(savedCurrentIndex);\n    } else if (savedActiveSection === 'correct' && savedCurrentIndex < savedCorrectCards.length) {\n      setCurrentCardIndex(savedCurrentIndex);\n    } else if (savedActiveSection === 'incorrect' && savedCurrentIndex < savedIncorrectCards.length) {\n      setCurrentCardIndex(savedCurrentIndex);\n    } else {\n      setCurrentCardIndex(0);\n    }\n  }, []);\n\n  // Save to localStorage whenever state changes\n  useEffect(() => {\n    localStorage.setItem('correctCards', JSON.stringify(correctCards));\n    localStorage.setItem('incorrectCards', JSON.stringify(incorrectCards));\n    localStorage.setItem('activeSection', activeSection);\n    localStorage.setItem('currentCardIndex', currentCardIndex.toString());\n    \n    // Update remaining cards whenever correct or incorrect cards change\n    if (flashcards.length > 0) {\n      const newRemainingCards = [...Array(flashcards.length).keys()].filter(\n        id => !correctCards.includes(id) && !incorrectCards.includes(id)\n      );\n      setRemainingCards(newRemainingCards);\n    }\n  }, [correctCards, incorrectCards, activeSection, currentCardIndex, flashcards.length]);\n\n  const parseMarkdown = (markdown) => {\n    // Improved parsing logic\n    const questionRegex = /\\*\\*(Q\\d+:.*?)\\*\\*/g;\n    const answerRegex = /\\*\\*(A\\d+:.*?)\\*\\*/g;\n    \n    const questions = [...markdown.matchAll(questionRegex)].map(m => m[1]);\n    const answers = [...markdown.matchAll(answerRegex)].map(m => m[1]);\n    \n    console.log(`Found ${questions.length} questions and ${answers.length} answers`);\n    \n    const cards = [];\n    for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n      cards.push({\n        id: i,\n        question: questions[i],\n        answer: answers[i]\n      });\n    }\n    \n    return cards;\n  };\n\n  const handleFlip = () => {\n    setShowAnswer(!showAnswer);\n  };\n\n  const handleCorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to correct\n      const currentId = remainingCards[currentCardIndex];\n      setCorrectCards([...correctCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'incorrect') {\n      // Move from incorrect to correct\n      const currentId = incorrectCards[currentCardIndex];\n      setIncorrectCards(incorrectCards.filter(id => id !== currentId));\n      setCorrectCards([...correctCards, currentId]);\n      \n      // If this was the last card in incorrect section, go back to main\n      if (incorrectCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= incorrectCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'correct') {\n      // Already correct, just go to next card\n      handleNext();\n    }\n  };\n\n  const handleIncorrect = () => {\n    if (activeSection === 'main') {\n      // Move from main deck to incorrect\n      const currentId = remainingCards[currentCardIndex];\n      setIncorrectCards([...incorrectCards, currentId]);\n      handleNext();\n    } else if (activeSection === 'correct') {\n      // Move from correct to incorrect\n      const currentId = correctCards[currentCardIndex];\n      setCorrectCards(correctCards.filter(id => id !== currentId));\n      setIncorrectCards([...incorrectCards, currentId]);\n      \n      // If this was the last card in correct section, go back to main\n      if (correctCards.length === 1) {\n        setActiveSection('main');\n        setCurrentCardIndex(0);\n      } else if (currentCardIndex >= correctCards.length - 1) {\n        // If it was the last card in the list, go to the previous card\n        setCurrentCardIndex(currentCardIndex - 1);\n      }\n      setShowAnswer(false);\n    } else if (activeSection === 'incorrect') {\n      // Already incorrect, just go to next card\n      handleNext();\n    }\n  };\n\n  const handleNext = () => {\n    setShowAnswer(false);\n    const currentCards = getCurrentCards();\n    \n    if (currentCardIndex < currentCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n    } else {\n      // All cards in this section have been reviewed\n      setCurrentCardIndex(0);\n    }\n  };\n\n  const switchSection = (section) => {\n    setActiveSection(section);\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n  };\n\n  const getCurrentCards = () => {\n    switch (activeSection) {\n      case 'correct':\n        return correctCards.map(id => ({ ...flashcards[id], originalId: id }));\n      case 'incorrect':\n        return incorrectCards.map(id => ({ ...flashcards[id], originalId: id }));\n      default:\n        return remainingCards.map(id => ({ ...flashcards[id], originalId: id }));\n    }\n  };\n\n  // Add a reset function to clear all progress\n  const resetProgress = () => {\n    if (window.confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n      setCorrectCards([]);\n      setIncorrectCards([]);\n      setRemainingCards([...Array(flashcards.length).keys()]);\n      setActiveSection('main');\n      setCurrentCardIndex(0);\n      setShowAnswer(false);\n      \n      // Clear localStorage\n      localStorage.removeItem('correctCards');\n      localStorage.removeItem('incorrectCards');\n      localStorage.removeItem('activeSection');\n      localStorage.removeItem('currentCardIndex');\n    }\n  };\n\n  const currentCards = getCurrentCards();\n  const currentCard = currentCards[currentCardIndex];\n\n  // Create indicator dots for cards\n  const renderIndicatorDots = () => {\n    return (\n      <div className=\"card-indicators\">\n        {currentCards.map((_, index) => (\n          <div \n            key={index} \n            className={`indicator-dot ${index === currentCardIndex ? 'active' : ''}`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (!currentCard) {\n    return (\n      <div className=\"flashcard-app\">\n        <h1>Flashcards</h1>\n        <div className=\"section-buttons\">\n          <button \n            onClick={() => switchSection('main')}\n            className={activeSection === 'main' ? 'active-section' : ''}\n          >\n            Main Deck ({remainingCards.length})\n          </button>\n          <button \n            onClick={() => switchSection('correct')}\n            className={activeSection === 'correct' ? 'active-section' : ''}\n          >\n            Correct ({correctCards.length})\n          </button>\n          <button \n            onClick={() => switchSection('incorrect')}\n            className={activeSection === 'incorrect' ? 'active-section' : ''}\n          >\n            Incorrect ({incorrectCards.length})\n          </button>\n        </div>\n        <div className=\"empty-message\">\n          {activeSection === 'main' \n            ? \"You've completed all flashcards! Review your correct or incorrect cards.\" \n            : `No cards in the ${activeSection} section yet.`}\n        </div>\n        <div className=\"reset-container\">\n          <button className=\"reset-button\" onClick={resetProgress}>Reset All Progress</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flashcard-app\">\n      <h1>Flashcards</h1>\n      \n      <div className=\"section-buttons\">\n        <button \n          onClick={() => switchSection('main')}\n          className={activeSection === 'main' ? 'active-section' : ''}\n        >\n          Main Deck ({remainingCards.length})\n        </button>\n        <button \n          onClick={() => switchSection('correct')}\n          className={activeSection === 'correct' ? 'active-section' : ''}\n        >\n          Correct ({correctCards.length})\n        </button>\n        <button \n          onClick={() => switchSection('incorrect')}\n          className={activeSection === 'incorrect' ? 'active-section' : ''}\n        >\n          Incorrect ({incorrectCards.length})\n        </button>\n      </div>\n      \n      <div className=\"progress\">\n        Card {currentCardIndex + 1} of {currentCards.length}\n      </div>\n      \n      {renderIndicatorDots()}\n      \n      <div className=\"flashcard\" onClick={handleFlip}>\n        <div className={`flashcard-inner ${showAnswer ? 'flipped' : ''}`}>\n          <div className=\"flashcard-front\">\n            <p>{currentCard.question}</p>\n          </div>\n          <div className=\"flashcard-back\">\n            <p>{currentCard.answer}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flip-hint\">\n        {!showAnswer ? \"Click card to reveal answer\" : \"Click buttons below to continue\"}\n      </div>\n      \n      <div className=\"controls\">\n        {showAnswer && (\n          <>\n            <button className=\"correct-btn\" onClick={handleCorrect}>Got it right</button>\n            <button className=\"incorrect-btn\" onClick={handleIncorrect}>Need more practice</button>\n          </>\n        )}\n        {!showAnswer && (\n          <button onClick={handleFlip}>Show Answer</button>\n        )}\n      </div>\n      \n      <div className=\"section-indicator\">\n        {activeSection === 'main' ? 'Main Deck' : \n         activeSection === 'correct' ? 'Reviewing Correct Cards' : \n         'Reviewing Incorrect Cards'}\n      </div>\n      \n      <div className=\"reset-container\">\n        <button className=\"reset-button\" onClick={resetProgress}>Reset All Progress</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}